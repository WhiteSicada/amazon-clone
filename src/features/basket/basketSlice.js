import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const initialState = {
  basketItems: [],
};

export const basketSlice = createSlice({
  name: "basket",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToBasket: (state, action) => {
      state.basketItems.push(action.payload);
    },
    removeFromBasket: (state, action) => {
      let index = state.basketItems.findIndex(
        (item) => item.id == action.payload
      );

      if (index >= 0) {
        state.basketItems = state.basketItems.filter(
          (item) => item.id != action.payload
        );
      } else {
        console.log(
          `can't remove item (id: ${action.payload}) as it's not in the basket `
        );
      }
    },
    emptyBasket: (state) => {
      state.basketItems = [];
    },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(incrementAsync.pending, (state) => {
  //         state.status = 'loading';
  //       })
  //       .addCase(incrementAsync.fulfilled, (state, action) => {
  //         state.status = 'idle';
  //         state.value += action.payload;
  //       });
  //   },
});

export const { addToBasket, removeFromBasket, emptyBasket } =
  basketSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectBasket = (state) => state.basket.basketItems;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default basketSlice.reducer;
